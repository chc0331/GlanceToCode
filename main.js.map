{
  "version": 3,
  "sources": ["src/figmanode/figmaNode.ts", "src/figmanode/figmaFrameNode.ts", "src/nodeparser/strategies/frameStrategy.ts", "src/figmanode/figmaRectangleNode.ts", "src/nodeparser/strategies/rectangleStrategy.ts", "src/figmanode/figmaTextNode.ts", "src/nodeparser/strategies/textStrategy.ts", "src/figmanode/figmaEllipseNode.ts", "src/nodeparser/strategies/ellipseStrategy.ts", "src/nodeparser/strategies/lineStrategy.ts", "src/figmanode/figmaImageNode.ts", "src/nodeparser/strategies/imageStrategy.ts", "src/nodeparser/FigmaNodeParser.ts", "src/extract.ts", "src/map.ts", "src/generate.ts", "src/run_pipeline.ts", "src/main.ts"],
  "sourcesContent": ["/** \n * | \uD074\uB798\uC2A4\uBA85                               | \uC5ED\uD560               | Figma API \uB300\uC751                                | Glance \uBCC0\uD658 \uC6A9\uB3C4                       |\n| ---------------------------------- | ---------------- | ------------------------------------------- | ---------------------------------- |\n| `FigmaNode`                        | \uBAA8\uB4E0 \uB178\uB4DC\uC758 \uAE30\uBCF8 \uCD94\uC0C1 \uD074\uB798\uC2A4 | `BaseNode`                                  | \uACF5\uD1B5 \uC18D\uC131(id, name, bounds, visible \uB4F1) |\n| `FigmaFrameNode`                   | \uB808\uC774\uC544\uC6C3 \uCEE8\uD14C\uC774\uB108        | `FrameNode`                                 | `Row` / `Column` / `Box` \uBCC0\uD658        |\n| `FigmaGroupNode`                   | \uB2E8\uC21C \uADF8\uB8F9            | `GroupNode`                                 | \uBCC0\uD658 \uC2DC \uC0DD\uB7B5\uB418\uAC70\uB098 \uBCD1\uD569                      |\n| `FigmaComponentNode`               | \uCEF4\uD3EC\uB10C\uD2B8 \uC815\uC758          | `ComponentNode`                             | \uC7AC\uC0AC\uC6A9 \uAC00\uB2A5\uD55C Glance \uCEF4\uD3EC\uC800\uBE14 \uC815\uC758             |\n| `FigmaInstanceNode`                | \uCEF4\uD3EC\uB10C\uD2B8 \uC778\uC2A4\uD134\uC2A4        | `InstanceNode`                              | \uAE30\uC874 \uC815\uC758\uB41C Glance \uCEF4\uD3EC\uC800\uBE14 \uD638\uCD9C              |\n| `FigmaRectangleNode`               | \uC0AC\uAC01\uD615 \uC694\uC18C           | `RectangleNode`                             | `Box` + `background` modifier      |\n| `FigmaEllipseNode`                 | \uC6D0\uD615 \uC694\uC18C            | `EllipseNode`                               | `Box` + `shape = CircleShape` \uB4F1    |\n| `FigmaTextNode`                    | \uD14D\uC2A4\uD2B8 \uC694\uC18C           | `TextNode`                                  | `Text()`                           |\n| `FigmaImageNode`                   | \uC774\uBBF8\uC9C0 \uC694\uC18C           | `VectorNode` / `RectangleNode` + fill=image | `Image()`                          |\n| `FigmaLineNode`                    | \uC120 \uC694\uC18C             | `LineNode`                                  | `Spacer(height=1.dp)` or `Divider` |\n| *(\uC120\uD0DD)* `FigmaBooleanOperationNode` | \uB3C4\uD615 \uD569\uC131            | `BooleanOperationNode`                      | \uBCA1\uD130 \uBA38\uC9D5 or \uBB34\uC2DC                        |\n| *(\uC120\uD0DD)* `FigmaComponentSetNode`     | Variants \uC9D1\uD569      | `ComponentSetNode`                          | \uC5EC\uB7EC \uC0C1\uD0DC \uCEF4\uD3EC\uB10C\uD2B8 \uAD00\uB9AC                      |\n * \n * \n * \n */\n\n/**\n * | **Figma Node Type**  | **\uC5ED\uD560**         | **Glance \uB9E4\uD551 \uB300\uC0C1**           | **\uBE44\uACE0**                 |\n| -------------------- | -------------- | -------------------------- | ---------------------- |\n| `FigmaNode`          | \uAE30\uBCF8 \uCD94\uC0C1 \uD0C0\uC785       | -                          | \uACF5\uD1B5 \uC18D\uC131(id, size, pos \uB4F1) |\n| `FigmaFrameNode`     | \uCEE8\uD14C\uC774\uB108 / \uB808\uC774\uC544\uC6C3    | `Box`, `Row`, `Column`     | layoutMode\uB85C \uAD6C\uBD84         |\n| `FigmaRectangleNode` | \uC0AC\uAC01\uD615 \uC601\uC5ED, \uBC84\uD2BC, \uBC30\uACBD | `Box(modifier=...)`        | \uC0C9\uC0C1, radius, border     |\n| `FigmaEllipseNode`   | \uC6D0\uD615, \uC544\uC774\uCF58 \uBC30\uACBD \uB4F1   | `Box(shape = CircleShape)` | `width==height`\uC2DC \uC6D0     |\n| `FigmaTextNode`      | \uD14D\uC2A4\uD2B8 \uD45C\uC2DC         | `Text()`                   | \uD3F0\uD2B8, \uC0C9\uC0C1, \uC815\uB82C             |\n| `FigmaImageNode`     | \uC774\uBBF8\uC9C0            | `Image(provider=...)`      | URL or resourceName    |\n * \n */\nexport abstract class FigmaBaseNode {\n    id: string;\n    name: string;\n    visible: boolean;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n    children?: FigmaBaseNode[];\n\n    constructor(id: string,\n        name: string,\n        visible: boolean,\n        width: number,\n        height: number,\n        x: number,\n        y: number,\n        children?: FigmaBaseNode[]) {\n        this.id = id;\n        this.name = name;\n        this.visible = visible;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.children = children\n    }\n\n    // abstract toGlance(): string;\n}", "// FigmaFrameNode.ts\nimport { FigmaBaseNode } from \"./figmaNode\";\n\nexport abstract class FigmaFrameNode extends FigmaBaseNode {\n  backgroundColor?: string;\n\n  constructor(\n    id: string,\n    name: string,\n    visible: boolean,\n    width: number,\n    height: number,\n    x: number,\n    y: number,\n    children?: FigmaBaseNode[],\n    backgroundColor?: string\n  ) {\n    super(id, name, visible, width, height, x, y, children);\n    this.backgroundColor = backgroundColor;\n  }\n}\n\nexport class FigmaBoxNode extends FigmaFrameNode {\n\n}\n\nexport class FigmaRowNode extends FigmaFrameNode {\n\n}\n\nexport class FigmaColumnNode extends FigmaFrameNode {\n\n}\n\n\n", "import { ParserStrategy } from \"./ParserStrategy\";\nimport { FigmaBaseNode } from \"../../figmanode/figmaNode\";\nimport { FigmaBoxNode, FigmaColumnNode, FigmaRowNode } from \"../../figmanode/figmaFrameNode\";\n\nexport const frameStrategy: ParserStrategy = {\n  nodeType: 'FRAME',\n  parse(node: SceneNode, parseChild) {\n    const layoutMode = (node as any).layoutMode || 'NONE';\n    const children = 'children' in node\n      ? node.children.map((c) => parseChild(c)).filter((n): n is FigmaBaseNode => n !== null)\n      : [];\n    const backgroundColor = ((): string | undefined => {\n      if (!Array.isArray((node as any).backgrounds) || (node as any).backgrounds.length === 0) return undefined;\n      const b = (node as any).backgrounds[0];\n      if (b && (b as any).type === 'SOLID') return rgbToHex((b as SolidPaint).color);\n      return undefined;\n    })();\n\n    if (layoutMode === 'HORIZONTAL')\n      return new FigmaRowNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, children, backgroundColor);\n    if (layoutMode === 'VERTICAL')\n      return new FigmaColumnNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, children, backgroundColor);\n    return new FigmaBoxNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, children, backgroundColor);\n  }\n};\n\nfunction rgbToHex(color: RGB): string {\n  const r = Math.round(color.r * 255).toString(16).padStart(2, '0');\n  const g = Math.round(color.g * 255).toString(16).padStart(2, '0');\n  const b = Math.round(color.b * 255).toString(16).padStart(2, '0');\n  return `#${r}${g}${b}`;\n}\n", "// FigmaRectangleNode.ts\n\nimport { FigmaBaseNode } from \"./figmaNode\";\n\n\nexport class FigmaRectangleNode extends FigmaBaseNode {\n    fillColor?: string;\n    cornerRadius?: number;\n\n    constructor(\n        id: string,\n        name: string,\n        visible: boolean,\n        width: number,\n        height: number,\n        x: number,\n        y: number,\n        fillColor?: string,\n        cornerRadius?: number\n    ) {\n        super(id, name, visible, width, height, x, y);\n        this.fillColor = fillColor;\n        this.cornerRadius = cornerRadius;\n    }\n}\n", "import { ParserStrategy } from \"./ParserStrategy\";\nimport { FigmaRectangleNode } from \"../../figmanode/figmaRectangleNode\";\n\nexport const rectangleStrategy: ParserStrategy = {\n  nodeType: 'RECTANGLE',\n  parse(node: SceneNode) {\n    const fillColor = ((): string | undefined => {\n      const fills = (node as any).fills;\n      if (!Array.isArray(fills) || fills.length === 0) return undefined;\n      const p = fills[0];\n      if (p && (p as any).type === 'SOLID') return rgbToHex((p as SolidPaint).color);\n      return undefined;\n    })();\n\n    return new FigmaRectangleNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, fillColor, undefined);\n  }\n};\n\nfunction rgbToHex(color: RGB): string {\n  const r = Math.round(color.r * 255).toString(16).padStart(2, '0');\n  const g = Math.round(color.g * 255).toString(16).padStart(2, '0');\n  const b = Math.round(color.b * 255).toString(16).padStart(2, '0');\n  return `#${r}${g}${b}`;\n}\n", "// FigmaTextNode.ts\n\nimport { FigmaBaseNode } from \"./figmaNode\";\n\nexport class FigmaTextNode extends FigmaBaseNode {\n    text: string;\n    fontSize: number;\n    color: string;\n    textAlign?: \"Left\" | \"Center\" | \"Right\";\n\n    constructor(\n        id: string,\n        name: string,\n        visible: boolean,\n        width: number,\n        height: number,\n        x: number,\n        y: number,\n        text: string,\n        fontSize: number,\n        color: string,\n        textAlign?: \"Left\" | \"Center\" | \"Right\"\n    ) {\n        super(id, name, visible, width, height, x, y);\n        this.text = text;\n        this.fontSize = fontSize;\n        this.color = color;\n        this.textAlign = textAlign;\n    }\n}\n", "import { ParserStrategy } from \"./ParserStrategy\";\nimport { FigmaTextNode } from \"../../figmanode/figmaTextNode\";\n\nexport const textStrategy: ParserStrategy = {\n  nodeType: 'TEXT',\n  parse(node: SceneNode) {\n    const color = ((): string => {\n      const fills = (node as any).fills;\n      if (!Array.isArray(fills) || fills.length === 0) return '#000000';\n      const p = fills[0];\n      if (p && (p as any).type === 'SOLID') return rgbToHex((p as SolidPaint).color);\n      return '#000000';\n    })();\n    const fontSize = typeof (node as any).fontSize === 'number' ? (node as any).fontSize : 14;\n    const align = (node as any).textAlignHorizontal === 'CENTER' ? 'Center' : (node as any).textAlignHorizontal === 'RIGHT' ? 'Right' : 'Left';\n    return new FigmaTextNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, (node as any).characters, fontSize, color, align);\n  }\n};\n\nfunction rgbToHex(color: RGB): string {\n  const r = Math.round(color.r * 255).toString(16).padStart(2, '0');\n  const g = Math.round(color.g * 255).toString(16).padStart(2, '0');\n  const b = Math.round(color.b * 255).toString(16).padStart(2, '0');\n  return `#${r}${g}${b}`;\n}\n", "// FigmaEllipseNode.ts\n\nimport { FigmaBaseNode } from \"./figmaNode\";\n\nexport class FigmaEllipseNode extends FigmaBaseNode {\n    fillColor?: string;\n\n    constructor(\n        id: string,\n        name: string,\n        visible: boolean,\n        width: number,\n        height: number,\n        x: number,\n        y: number,\n        fillColor?: string\n    ) {\n        super(id, name, visible, width, height, x, y);\n        this.fillColor = fillColor;\n    }\n}\n", "import { ParserStrategy } from \"./ParserStrategy\";\nimport { FigmaEllipseNode } from \"../../figmanode/figmaEllipseNode\";\n\nexport const ellipseStrategy: ParserStrategy = {\n  nodeType: 'ELLIPSE',\n  parse(node: SceneNode) {\n    const fillColor = ((): string | undefined => {\n      const fills = (node as any).fills;\n      if (!Array.isArray(fills) || fills.length === 0) return undefined;\n      const p = fills[0];\n      if (p && (p as any).type === 'SOLID') return rgbToHex((p as SolidPaint).color);\n      return undefined;\n    })();\n\n    return new FigmaEllipseNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, fillColor);\n  }\n};\n\nfunction rgbToHex(color: RGB): string {\n  const r = Math.round(color.r * 255).toString(16).padStart(2, '0');\n  const g = Math.round(color.g * 255).toString(16).padStart(2, '0');\n  const b = Math.round(color.b * 255).toString(16).padStart(2, '0');\n  return `#${r}${g}${b}`;\n}\n", "import { ParserStrategy } from \"./ParserStrategy\";\nimport { FigmaRectangleNode } from \"../../figmanode/figmaRectangleNode\";\n\nexport const lineStrategy: ParserStrategy = {\n  nodeType: 'LINE',\n  parse(node: SceneNode) {\n    const strokeColor = ((): string | undefined => {\n      const strokes = (node as any).strokes;\n      if (!Array.isArray(strokes) || strokes.length === 0) return undefined;\n      const s = strokes[0];\n      if (s && (s as any).type === 'SOLID') return rgbToHex((s as SolidPaint).color);\n      return undefined;\n    })();\n\n    return new FigmaRectangleNode(node.id, node.name, node.visible, node.width || 1, node.height || 1, node.x, node.y, strokeColor, undefined);\n  }\n};\n\nfunction rgbToHex(color: RGB): string {\n  const r = Math.round(color.r * 255).toString(16).padStart(2, '0');\n  const g = Math.round(color.g * 255).toString(16).padStart(2, '0');\n  const b = Math.round(color.b * 255).toString(16).padStart(2, '0');\n  return `#${r}${g}${b}`;\n}\n", "// FigmaImageNode.ts\n\nimport { FigmaBaseNode } from \"./figmaNode\";\n\nexport class FigmaImageNode extends FigmaBaseNode {\n    imageUrl: string;\n    contentScale: \"Fit\" | \"Crop\" | \"Fill\";\n\n    constructor(\n        id: string,\n        name: string,\n        visible: boolean,\n        width: number,\n        height: number,\n        x: number,\n        y: number,\n        imageUrl: string,\n        contentScale: \"Fit\" | \"Crop\" | \"Fill\"\n    ) {\n        super(id, name, visible, width, height, x, y);\n        this.imageUrl = imageUrl;\n        this.contentScale = contentScale;\n    }\n}\n", "import { ParserStrategy } from \"./ParserStrategy\";\nimport { FigmaImageNode } from \"../../figmanode/figmaImageNode\";\n\nexport const imageStrategy: ParserStrategy = {\n  nodeType: 'COMPONENT',\n  parse(node: SceneNode) {\n    let imageUrl = \"\";\n    const fills = (node as any).fills;\n    if (Array.isArray(fills) && fills.length > 0 && (fills[0] as any).imageHash) {\n      imageUrl = (fills[0] as any).imageHash;\n    }\n    return new FigmaImageNode(node.id, node.name, node.visible, node.width, node.height, node.x, node.y, imageUrl, 'Fit');\n  }\n};\n\n// Also export an INSTANCE strategy (registered by parser loader)\nexport const instanceImageStrategy: ParserStrategy = {\n  nodeType: 'INSTANCE',\n  parse: imageStrategy.parse\n};\n", "import { FigmaBaseNode } from \"../figmanode/figmaNode\";\nimport { frameStrategy } from \"./strategies/frameStrategy\";\nimport { rectangleStrategy } from \"./strategies/rectangleStrategy\";\nimport { textStrategy } from \"./strategies/textStrategy\";\nimport { ellipseStrategy } from \"./strategies/ellipseStrategy\";\nimport { lineStrategy } from \"./strategies/lineStrategy\";\nimport { imageStrategy, instanceImageStrategy } from \"./strategies/imageStrategy\";\nimport { ParserStrategy } from \"./strategies/ParserStrategy\";\n\n\n/**\n * SceneNode \u2192 FigmaBaseNode \uAD6C\uC870\uB85C \uD30C\uC2F1\n */\ntype ParserFn = (node: SceneNode) => FigmaBaseNode | null;\n\nconst parserRegistry: Map<string, ParserFn> = new Map();\n\nexport function registerParserStrategy(nodeType: string, fn: ParserFn) {\n  parserRegistry.set(nodeType, fn);\n}\n\n// parseFigmaNode now dispatches to a registered strategy\nexport function parseFigmaNode(node: SceneNode): FigmaBaseNode | null {\n  const handler = parserRegistry.get(node.type);\n  if (handler) return handler(node);\n  return null;\n}\n// register built-in strategies using adapters that pass parseFigmaNode as the child parser\nconst builtIn: ParserStrategy[] = [\n  frameStrategy,\n  rectangleStrategy,\n  textStrategy,\n  ellipseStrategy,\n  lineStrategy,\n  imageStrategy,\n  instanceImageStrategy,\n];\n\nfor (const s of builtIn) {\n  registerParserStrategy(s.nodeType, (n: SceneNode) => s.parse(n, parseFigmaNode as any));\n}\n\n/**\n * \u2705 \uD604\uC7AC \uC120\uD0DD\uB41C \uB178\uB4DC\uB4E4 \uD30C\uC2F1\n */\nexport function parseSelectedNodes(): FigmaBaseNode[] {\n  const selection = figma.currentPage.selection;\n  if (selection.length === 0) {\n    figma.notify(\"\uC120\uD0DD\uB41C \uB178\uB4DC\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.\");\n    return [];\n  }\n\n  return selection\n    .map((node) => parseFigmaNode(node))\n    .filter((n): n is FigmaBaseNode => n !== null);\n}\n\n// Convert FigmaBaseNode instances to plain serializable objects\nfunction toPlain(node: FigmaBaseNode): any {\n  const base: any = {\n    id: node.id,\n    name: node.name,\n    visible: node.visible,\n    width: node.width,\n    height: node.height,\n    x: node.x,\n    y: node.y,\n  };\n\n  if ((node as any).children) {\n    base.children = (node as any).children.map((c: FigmaBaseNode) => toPlain(c));\n  }\n\n  // include subclass-specific properties if present\n  if ((node as any).backgroundColor) base.backgroundColor = (node as any).backgroundColor;\n  if ((node as any).fillColor) base.fillColor = (node as any).fillColor;\n  if ((node as any).text) base.text = (node as any).text;\n  if ((node as any).fontSize) base.fontSize = (node as any).fontSize;\n  if ((node as any).color) base.color = (node as any).color;\n  if ((node as any).imageUrl) base.imageUrl = (node as any).imageUrl;\n\n  return base;\n}\n\n/**\n * Serialize current selection's parsed tree to JSON.\n * - returns JSON string (or null if nothing selected)\n * - posts message to UI with type 'parsedTree' and payload { json }\n */\nexport function serializeSelectedNodesToJSON(pretty = true): string | null {\n  const nodes = parseSelectedNodes();\n  if (nodes.length === 0) return null;\n  const plain = nodes.map((n) => toPlain(n));\n  const json = pretty ? JSON.stringify(plain, null, 2) : JSON.stringify(plain);\n  try {\n    // Notify UI if available\n    if (typeof figma !== 'undefined' && figma.ui) {\n      figma.ui.postMessage({ type: 'parsedTree', json });\n    }\n  } catch (e) {\n    // ignore if not in plugin environment\n  }\n  return json;\n}\n", "// ======================================================\n// extract.ts\n// \uC5ED\uD560: Figma SceneNode\uC5D0\uC11C \uD544\uC694\uD55C \uC18D\uC131\uC744 \uCD94\uCD9C\uD558\uC5EC\n// \uC911\uAC04 \uD45C\uD604\uC778 `FigmaNode` \uAC1D\uCCB4\uB85C \uBCC0\uD658\uD569\uB2C8\uB2E4.\n// - \uC704\uCE58, \uD06C\uAE30, fills, \uD14D\uC2A4\uD2B8/\uB808\uC774\uC544\uC6C3 \uAD00\uB828 \uC18D\uC131 \uB4F1 \uCD94\uCD9C\n// - \uC7AC\uADC0\uC801\uC73C\uB85C \uC790\uC2DD \uB178\uB4DC\uB3C4 \uCD94\uCD9C\uD558\uC5EC \uD2B8\uB9AC \uAD6C\uC870 \uC0DD\uC131\n// ======================================================\nimport { FigmaNode } from './types';\nimport { parseFigmaNode } from './nodeparser/FigmaNodeParser';\nimport { FigmaBaseNode } from './figmanode/figmaNode';\n\nexport function extractNode(node: SceneNode): FigmaNode | null {\n  // Try to use the richer parser which creates figmanode class instances,\n  // then map that structure back into the pipeline's lightweight `FigmaNode` type.\n  const parsed = parseFigmaNode(node);\n  console.log(\"Parsed nodes : \", parsed);\n  if (parsed) {\n    return mapFigmaBaseNodeToFigmaNode(parsed);\n  }\n\n  // Fallback: preserve original light-weight extraction behavior\n  const baseNode: FigmaNode = {\n    id: node.id,\n    type: node.type,\n    name: node.name,\n    x: Math.round(node.x),\n    y: Math.round(node.y),\n    width: Math.round(node.width),\n    height: Math.round(node.height),\n  };\n\n  if ('fills' in node && node.fills && node.fills !== figma.mixed) {\n    baseNode.fills = node.fills as ReadonlyArray<Paint>;\n  }\n\n  if (node.type === 'TEXT') {\n    const textNode = node as TextNode;\n    baseNode.characters = textNode.characters;\n    baseNode.fontSize = textNode.fontSize as number;\n    baseNode.fontName = textNode.fontName as FontName;\n    baseNode.textAlignHorizontal = textNode.textAlignHorizontal;\n    baseNode.textAlignVertical = textNode.textAlignVertical;\n  }\n\n  if (node.type === 'FRAME' || node.type === 'COMPONENT' || node.type === 'INSTANCE') {\n    const frameNode = node as FrameNode;\n    baseNode.layoutMode = frameNode.layoutMode;\n    baseNode.primaryAxisAlignItems = frameNode.primaryAxisAlignItems;\n    baseNode.counterAxisAlignItems = frameNode.counterAxisAlignItems;\n    baseNode.paddingLeft = frameNode.paddingLeft;\n    baseNode.paddingRight = frameNode.paddingRight;\n    baseNode.paddingTop = frameNode.paddingTop;\n    baseNode.paddingBottom = frameNode.paddingBottom;\n    baseNode.itemSpacing = frameNode.itemSpacing;\n  }\n\n  if ('children' in node && node.children) {\n    baseNode.children = node.children\n      .map(child => extractNode(child))\n      .filter((child): child is FigmaNode => child !== null);\n  }\n\n  return baseNode;\n}\n\nfunction mapFigmaBaseNodeToFigmaNode(n: FigmaBaseNode): FigmaNode {\n  const out: FigmaNode = {\n    id: n.id,\n    type: (n as any).constructor && (n as any).constructor.name ? (n as any).constructor.name : 'Node',\n    name: n.name,\n    x: Math.round(n.x || 0),\n    y: Math.round(n.y || 0),\n    width: Math.round(n.width || 0),\n    height: Math.round(n.height || 0),\n  };\n\n  // map known properties\n  if ((n as any).fillColor) out.fills = [{ type: 'SOLID', color: hexToRgb((n as any).fillColor) } as any];\n  if ((n as any).backgroundColor) out.fills = [{ type: 'SOLID', color: hexToRgb((n as any).backgroundColor) } as any];\n  if ((n as any).text) {\n    out.characters = (n as any).text;\n    out.fontSize = (n as any).fontSize;\n  }\n\n  if ((n as any).children && Array.isArray((n as any).children)) {\n    out.children = (n as any).children.map((c: FigmaBaseNode) => mapFigmaBaseNodeToFigmaNode(c));\n  }\n\n  return out;\n}\n\nfunction hexToRgb(hex?: string): RGB | undefined {\n  if (!hex) return undefined;\n  // remove '#'\n  const h = hex.replace('#', '');\n  if (h.length !== 6) return undefined;\n  const r = parseInt(h.substring(0, 2), 16) / 255;\n  const g = parseInt(h.substring(2, 4), 16) / 255;\n  const b = parseInt(h.substring(4, 6), 16) / 255;\n  return { r, g, b } as RGB;\n}\n", "// ======================================================\n// map.ts\n// \uC5ED\uD560: `FigmaNode` \uC911\uAC04 \uD45C\uD604\uC744 Glance\uC6A9 \uCEF4\uD3EC\uB10C\uD2B8 \uD45C\uD604(`GlanceComponent`)\uC73C\uB85C \uBCC0\uD658\uD569\uB2C8\uB2E4.\n// - \uB178\uB4DC \uD0C0\uC785\uBCC4 \uB9E4\uD551(mapRectangleToBox, mapTextToText, mapFrameToContainer)\n// - \uB808\uC774\uC544\uC6C3/\uC815\uB82C/Modifier \uBB38\uC790\uC5F4 \uC0DD\uC131\n// ======================================================\nimport { FigmaNode, GlanceComponent } from './types';\n\nexport function mapNodeToComponent(node: FigmaNode): GlanceComponent | null {\n  switch (node.type) {\n    case 'RECTANGLE':\n      return mapRectangleToBox(node);\n    case 'TEXT':\n      return mapTextToText(node);\n    case 'FRAME':\n    case 'COMPONENT':\n    case 'INSTANCE':\n      return mapFrameToContainer(node);\n    default:\n      console.warn(`Unsupported node type: ${node.type}`);\n      return null;\n  }\n}\n\nexport function mapRectangleToBox(node: FigmaNode): GlanceComponent {\n  const modifier = buildModifier(node);\n  let backgroundColor = '';\n  if (node.fills && node.fills.length > 0) {\n    const solid = node.fills.find((p): p is SolidPaint => p.type === 'SOLID');\n    if (solid) {\n      const r = Math.round((solid.color.r || 0) * 255);\n      const g = Math.round((solid.color.g || 0) * 255);\n      const b = Math.round((solid.color.b || 0) * 255);\n      backgroundColor = `Color(${r}, ${g}, ${b})`;\n    }\n  }\n\n  return {\n    type: 'Box',\n    modifier,\n    properties: {\n      width: node.width,\n      height: node.height,\n      x: node.x,\n      y: node.y,\n      backgroundColor,\n    },\n  };\n}\n\nexport function mapTextToText(node: FigmaNode): GlanceComponent {\n  const modifier = buildModifier(node);\n  return {\n    type: 'Text',\n    modifier,\n    content: node.characters || '',\n    properties: {\n      width: node.width,\n      height: node.height,\n      x: node.x,\n      y: node.y,\n      text: node.characters || '',\n      fontSize: node.fontSize,\n      textAlign: mapTextAlign(node.textAlignHorizontal),\n    },\n  };\n}\n\nexport function mapFrameToContainer(node: FigmaNode): GlanceComponent {\n  const modifier = buildModifier(node);\n  let containerType: 'Column' | 'Row' | 'Box' = 'Box';\n  if (node.layoutMode === 'VERTICAL') {\n    containerType = 'Column';\n  } else if (node.layoutMode === 'HORIZONTAL') {\n    containerType = 'Row';\n  }\n\n  const children: GlanceComponent[] = [];\n  if (node.children) {\n    for (const child of node.children) {\n      const childComponent = mapNodeToComponent(child);\n      if (childComponent) {\n        children.push(childComponent);\n      }\n    }\n  }\n\n  return {\n    type: containerType,\n    modifier,\n    children,\n    properties: {\n      width: node.width,\n      height: node.height,\n      x: node.x,\n      y: node.y,\n      padding: {\n        start: node.paddingLeft,\n        end: node.paddingRight,\n        top: node.paddingTop,\n        bottom: node.paddingBottom,\n      },\n      spacing: node.itemSpacing,\n      alignment: mapAlignment(node.primaryAxisAlignItems, node.counterAxisAlignItems),\n    },\n  };\n}\n\nexport function buildModifier(node: FigmaNode): string {\n  const parts: string[] = [];\n  if (node.x !== 0 || node.y !== 0) {\n    parts.push(`offset(x = ${node.x}.dp, y = ${node.y}.dp)`);\n  }\n  parts.push(`size(width = ${node.width}.dp, height = ${node.height}.dp)`);\n  return parts.join('\\n        .');\n}\n\nexport function mapTextAlign(align?: string): string {\n  switch (align) {\n    case 'CENTER': return 'TextAlign.Center';\n    case 'RIGHT': return 'TextAlign.End';\n    case 'JUSTIFIED': return 'TextAlign.Justify';\n    default: return 'TextAlign.Start';\n  }\n}\n\nexport function mapAlignment(primary?: string, counter?: string): string {\n  if (primary === 'CENTER' && counter === 'CENTER') {\n    return 'Alignment.Center';\n  }\n  return 'Alignment.TopStart';\n}\n", "// ======================================================\n// generate.ts\n// \uC5ED\uD560: \uC911\uAC04 \uD45C\uD604\uC778 `GlanceComponent` \uB9AC\uC2A4\uD2B8\uB97C \uBC1B\uC544 \uCD5C\uC885 \uCF54\uB4DC \uBB38\uC790\uC5F4\uC744 \uC0DD\uC131\uD569\uB2C8\uB2E4.\n// - \uD544\uC694\uD55C import \uBE14\uB7ED \uC0DD\uC131\n// - \uCEF4\uD3EC\uB10C\uD2B8 \uD0C0\uC785\uBCC4 \uCF54\uB4DC \uC0DD\uC131(Box, Column, Row, Text)\n// - \uB4E4\uC5EC\uC4F0\uAE30\uC640 \uD3EC\uB9F7\uC744 \uAD00\uB9AC\uD558\uC5EC \uCD5C\uC885 Kotlin/Compose \uCF54\uB4DC \uBC18\uD658\n// ======================================================\nimport { GlanceComponent } from './types';\n\nexport function generateImports(): string {\n  return `import androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.background\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.glance.*\nimport androidx.glance.action.*\nimport androidx.glance.appwidget.*\nimport androidx.glance.appwidget.action.*\nimport androidx.glance.layout.*\nimport androidx.glance.text.*`;\n}\n\nexport function generateComponent(component: GlanceComponent, indentLevel: number): string {\n  const indent = '    '.repeat(indentLevel);\n  const nextIndent = '    '.repeat(indentLevel + 1);\n  let code = '';\n  switch (component.type) {\n    case 'Box':\n      code += generateBox(component, indent, nextIndent);\n      break;\n    case 'Column':\n      code += generateColumn(component, indent, nextIndent);\n      break;\n    case 'Row':\n      code += generateRow(component, indent, nextIndent);\n      break;\n    case 'Text':\n      code += generateText(component, indent);\n      break;\n    default:\n      code += `${indent}// Unsupported component type: ${component.type}\\n`;\n  }\n  return code;\n}\n\nfunction generateBox(component: GlanceComponent, indent: string, nextIndent: string): string {\n  let code = `${indent}Box(\\n`;\n  code += `${nextIndent}modifier = Modifier\\n`;\n  if (component.modifier) {\n    code += `${nextIndent}    .${component.modifier}\\n`;\n  }\n  if (component.properties.backgroundColor) {\n    code += `${nextIndent}    .background(${component.properties.backgroundColor})\\n`;\n  }\n  code += `${nextIndent}\\n`;\n  if (component.children && component.children.length > 0) {\n    code += `${nextIndent}) {\\n`;\n    for (const child of component.children) {\n      code += generateComponent(child, component.children!.indexOf(child) + 2);\n    }\n    code += `${nextIndent}}\\n`;\n  } else {\n    code += `${nextIndent}) {}\\n`;\n  }\n  return code;\n}\n\nfunction generateColumn(component: GlanceComponent, indent: string, nextIndent: string): string {\n  let code = `${indent}Column(\\n`;\n  code += `${nextIndent}modifier = Modifier\\n`;\n  if (component.modifier) {\n    code += `${nextIndent}    .${component.modifier}\\n`;\n  }\n  if (component.properties.spacing) {\n    code += `${nextIndent}    .padding(${component.properties.spacing}.dp)\\n`;\n  }\n  code += `${nextIndent}\\n`;\n  if (component.children && component.children.length > 0) {\n    code += `${nextIndent}) {\\n`;\n    for (const child of component.children) {\n      code += generateComponent(child, component.children!.indexOf(child) + 2);\n    }\n    code += `${nextIndent}}\\n`;\n  } else {\n    code += `${nextIndent}) {}\\n`;\n  }\n  return code;\n}\n\nfunction generateRow(component: GlanceComponent, indent: string, nextIndent: string): string {\n  let code = `${indent}Row(\\n`;\n  code += `${nextIndent}modifier = Modifier\\n`;\n  if (component.modifier) {\n    code += `${nextIndent}    .${component.modifier}\\n`;\n  }\n  if (component.properties.spacing) {\n    code += `${nextIndent}    .padding(${component.properties.spacing}.dp)\\n`;\n  }\n  code += `${nextIndent}\\n`;\n  if (component.children && component.children.length > 0) {\n    code += `${nextIndent}) {\\n`;\n    for (const child of component.children) {\n      code += generateComponent(child, component.children!.indexOf(child) + 2);\n    }\n    code += `${nextIndent}}\\n`;\n  } else {\n    code += `${nextIndent}) {}\\n`;\n  }\n  return code;\n}\n\nfunction generateText(component: GlanceComponent, indent: string): string {\n  let code = `${indent}Text(\\n`;\n  code += `${indent}    text = \"${component.properties.text || ''}\",\\n`;\n  if (component.properties.fontSize) {\n    code += `${indent}    fontSize = ${component.properties.fontSize}.sp,\\n`;\n  }\n  if (component.properties.textAlign) {\n    code += `${indent}    textAlign = ${component.properties.textAlign},\\n`;\n  }\n  code += `${indent}    modifier = Modifier\\n`;\n  if (component.modifier) {\n    code += `${indent}        .${component.modifier}\\n`;\n  }\n  code += `${indent})\\n`;\n  return code;\n}\n", "// Design to Code Plugin - Pipeline Architecture\n// Converts Figma designs to Jetpack Glance code\n\n// ======================================================\n// run_pipeline.ts\n// \uC5ED\uD560: \uD30C\uC774\uD504\uB77C\uC778\uC758 \uC624\uCF00\uC2A4\uD2B8\uB808\uC774\uD130 \uC5ED\uD560\uC744 \uD569\uB2C8\uB2E4.\n// 1) \uD604\uC7AC \uC120\uD0DD\uB41C Figma \uB178\uB4DC\uB97C \uCD94\uCD9C(extract)\n// 2) \uCD94\uCD9C\uD55C \uC911\uAC04 \uD45C\uD604\uC744 Glance \uCEF4\uD3EC\uB10C\uD2B8\uB85C \uB9E4\uD551(map)\n// 3) \uB9E4\uD551 \uACB0\uACFC\uB85C\uBD80\uD130 \uCD5C\uC885 \uCF54\uB4DC\uB97C \uC0DD\uC131(generate)\n// 4) UI\uC5D0 \uACB0\uACFC\uB97C \uCD9C\uB825 \uBC0F \uBA54\uC2DC\uC9C0 \uCC98\uB9AC\n// (\uBE44\uC988\uB2C8\uC2A4 \uB85C\uC9C1\uC740 extract/map/generate\uC5D0 \uC704\uC784\uB418\uC5B4 \uC774 \uD30C\uC77C\uC740 \uD750\uB984 \uC81C\uC5B4\uB9CC \uB2F4\uB2F9)\n// ======================================================\nimport { FigmaNode, GlanceComponent } from './types';\nimport { extractNode } from './extract';\nimport { mapNodeToComponent } from './map';\nimport { generateImports, generateComponent } from './generate';\nimport { serializeSelectedNodesToJSON } from './nodeparser/FigmaNodeParser';\n\n// Main Pipeline Function\nexport async function runPipeline(): Promise<void> {\n  console.log(\"\uD83D\uDE80 Pipeline started\");\n  \n  try {\n    // Get current selection\n    const selection = figma.currentPage.selection;\n    if (selection.length === 0) {\n      figma.notify(\"Please select some nodes to convert\");\n      figma.closePlugin();\n      return;\n    }\n\n    // Stage 1: Extract Figma Nodes\n    const nodes: FigmaNode[] = [];\n    for (const node of selection) {\n      console.log(\"Selected nodes : \", node);\n      const extractedNode = extractNode(node);\n      if (extractedNode) {\n        nodes.push(extractedNode);\n      }\n    }\n\n    if (nodes.length === 0) {\n      figma.notify(\"No supported nodes found in selection\");\n      figma.closePlugin();\n      return;\n    }\n\n    // Stage 2: Mapping - Transform Figma to Glance\n    const components: GlanceComponent[] = [];\n    for (const node of nodes) {\n      const component = mapNodeToComponent(node);\n      if (component) {\n        components.push(component);\n      }\n    }\n\n    // Stage 3: Generate Code\n    let code = generateImports();\n    code += '\\n\\n';\n    code += '@Composable\\nfun GeneratedFromFigma() {\\n';\n    \n    for (const component of components) {\n      code += generateComponent(component, 1);\n    }\n    \n    code += '}';\n\n    // Stage 4: Output\n    figma.showUI(__html__, { width: 600, height: 500 });\n    figma.ui.postMessage({ type: 'code', code });\n\n    // Also serialize parsed tree and send to UI to trigger download\n    const parsedJson = serializeSelectedNodesToJSON(true);\n    if (parsedJson) {\n      // Log parsed JSON for inspection\n      console.log('--- parsed tree JSON START ---');\n      console.log(parsedJson);\n      console.log('--- parsed tree JSON END ---');\n      figma.ui.postMessage({ type: 'parsedTree', json: parsedJson });\n    }\n    \n    // Set up message handling\n    figma.ui.onmessage = (msg) => {\n      if (msg.type === 'close') {\n        figma.closePlugin();\n      }\n    };\n\n    console.log(\"\u2705 Pipeline finished successfully\");\n    \n  } catch (error) {\n    console.error(\"\u274C Pipeline failed:\", error);\n    figma.notify(`Pipeline error: ${error}`);\n    figma.closePlugin();\n  }\n}", "// Main plugin entry point\nimport {runPipeline} from \"./run_pipeline\";\n\nfigma.on(\"run\", async () => {\n  try {\n    await runPipeline();\n  } catch (error) {\n    console.error(\"Plugin error:\", error);\n    figma.notify(`Error: ${error}`);\n    figma.closePlugin();\n  }\n});\n"],
  "mappings": "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",
  "names": ["rgbToHex", "rgbToHex", "rgbToHex", "rgbToHex"]
}
